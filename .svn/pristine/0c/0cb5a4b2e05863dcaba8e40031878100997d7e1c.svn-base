package mjhp

import (
	"log"
	"fmt"
)

const (
	RATE_MASK_7DUI         = int64(0x001)     // 7对			0
	RATE_MASK_MEN_QING     = int64(0x002)     // 门清		1
	RATE_MASK_ZHONG_ZHANG  = int64(0x004)     // 中张		2
	RATE_MASK_JIA_XIN5     = int64(0x008)     // 夹心5		3
	RATE_MASK_JIN_GOU      = int64(0x010)     // 金钩胡		4
	RATE_MASK_DUIDUI_HU    = int64(0x020)     // 对对胡		5
	RATE_MASK_QING_YI_SE   = int64(0x040)     // 清一色		6
	RATE_MASK_BENJIN       = int64(0x080)     // 本金暗刻	7	7
	RATE_MASK_LAIZI8       = int64(0x100)     // 8个癞子	8	8
	RATE_MASK_LAIZI4       = int64(0x200)     // 4个癞子	9	9
	RATE_MASK_WU_TING_YONG = int64(0x400)     // 无听用		10
	RATE_MASK_TIAN_HU      = int64(0x800)     // 天胡		11
	RATE_MASK_DI_HU        = int64(0x1000)    // 地胡		12
	RATE_MASK_JIANG_DUI    = int64(0x2000)    // 将对		13
	RATE_MASK_HAI_DI_ZM    = int64(0x4000)    // 海底自摸		14
	RATE_MASK_HAI_DI_PAO   = int64(0x8000)    // 海底炮		15
	RATE_MASK_GSH          = int64(0x10000)   // 杠上花		16
	RATE_MASK_GSP          = int64(0x20000)   // 杠上炮		17
	RATE_MASK_GQH          = int64(0x40000)   // 杠抢胡		18
	RATE_MASK_LONG_7DUI    = int64(0x80000)   // 龙7对		19
	RATE_MASK_QING_7DUI    = int64(0x100000)  // 清对、清七对 20
	RATE_MASK_QL_7DUI      = int64(0x200000)  // 清龙七对		21
	RATE_MASK_YAO_JIU      = int64(0x400000)  // 幺九		22
	RATE_MASK_DA_JIAO      = int64(0x800000)  // 查大觉		23
	RATE_MASK_HUA_ZU       = int64(0x1000000) // 查花猪		24
)

func rateToString(v int64) string {
	var str string
	if v&RATE_MASK_7DUI == RATE_MASK_7DUI {
		str = fmt.Sprintf(",%s", "7对")
	}
	if v&RATE_MASK_MEN_QING == RATE_MASK_MEN_QING {
		str = fmt.Sprintf("%s,%s", str, "门清")
	}
	if v&RATE_MASK_ZHONG_ZHANG == RATE_MASK_ZHONG_ZHANG {
		str = fmt.Sprintf("%s,%s", str, "中张")
	}
	if v&RATE_MASK_JIA_XIN5 == RATE_MASK_JIA_XIN5 {
		str = fmt.Sprintf("%s,%s", str, "夹心5")
	}
	if v&RATE_MASK_JIN_GOU == RATE_MASK_JIN_GOU {
		str = fmt.Sprintf("%s,%s", str, "金钩胡")
	}
	if v&RATE_MASK_DUIDUI_HU == RATE_MASK_DUIDUI_HU {
		str = fmt.Sprintf("%s,%s", str, "对对胡")
	}
	if v&RATE_MASK_QING_YI_SE == RATE_MASK_QING_YI_SE {
		str = fmt.Sprintf("%s,%s", str, "清一色")
	}
	if v&RATE_MASK_BENJIN == RATE_MASK_BENJIN {
		str = fmt.Sprintf("%s,%s", str, "本金暗刻")
	}
	if v&RATE_MASK_LAIZI8 == RATE_MASK_LAIZI8 {
		str = fmt.Sprintf("%s,%s", str, "8个癞子")
	}
	if v&RATE_MASK_LAIZI4 == RATE_MASK_LAIZI4 {
		str = fmt.Sprintf("%s,%s", str, "4个癞子")
	}
	if v&RATE_MASK_WU_TING_YONG == RATE_MASK_WU_TING_YONG {
		str = fmt.Sprintf("%s,%s", str, "无听用")
	}
	if v&RATE_MASK_JIANG_DUI == RATE_MASK_JIANG_DUI {
		str = fmt.Sprintf("%s,%s", str, "将对")
	}
	if v&RATE_MASK_YAO_JIU == RATE_MASK_YAO_JIU {
		str = fmt.Sprintf("%s,%s", str, "幺九")
	}
	if v&RATE_MASK_HUA_ZU == RATE_MASK_HUA_ZU {
		str = fmt.Sprintf("%s,%s", str, "查花猪")
	}
	if v&RATE_MASK_DA_JIAO == RATE_MASK_DA_JIAO {
		str = fmt.Sprintf("%s,%s", str, "查大叫")
	}
	return str
}

const (
	CMASK_DDH        = 0x1
	CMASK_YJJD       = 0x2
	CMASK_JX5        = 0x4
	CMASK_MENQING    = 0x8
	CMASK_ZHONGZHANG = 0x10
)

type RateResult struct {
	Mask      int64
	GangCount int
}

func (this *JudgeReq) IsDdh2Rate() bool {
	return this.CMask&CMASK_DDH == CMASK_DDH
}

func (this *JudgeReq) IsYJJD() bool {
	return this.CMask&CMASK_YJJD == CMASK_YJJD
}

func (this *JudgeReq) IsJX5() bool {
	return this.CMask&CMASK_JX5 == CMASK_JX5
}

func (this *JudgeReq) IsMenQing() bool {
	return this.CMask&CMASK_MENQING == CMASK_MENQING
}

func (this *JudgeReq) IsZhongZhang() bool {
	return this.CMask&CMASK_ZHONGZHANG == CMASK_ZHONGZHANG
}

// 判断翻数
// 0x00000000 低8bit，存放基本番，高24bit存放特殊翻数标识
func JudgeRate(req *JudgeReq) (rate *RateResult) {
	if req.MaxRate == 0 {
		req.MaxRate = 6
	}
	lenOfHands := len(req.handsWithLz)
	rate = &RateResult{}
	if lenOfHands%3 != 2 {
		log.Printf("JudgeRate hands number error: %v \n", req.hands)
		return
	}
	judgeRateImpl(rate, req)
	judgeBaseRateWithRate(rate, req)
	//judgeSpecMask(rate, req.hands, req.Events)
	return
}

// 判断特殊牌型
func judgeSpecMask(rate *RateResult, hands []byte, events []MjEvent) {
	lenOfHands := len(hands)
	// 1. 判断门清
	if lenOfHands == 14 {
		rate.Mask |= RATE_MASK_MEN_QING
	}
	// 2. 判断中张, 没有1，9
	isZhognZhang := true
	for _, m := range hands {
		switch m {
		case 0x01:
		case 0x09:
		case 0x11:
		case 0x19:
		case 0x21:
		case 0x29:
			isZhognZhang = false
			break
		}
	}
	if isZhognZhang {
		rate.Mask |= RATE_MASK_ZHONG_ZHANG
	}
}

// 判断基本番数
func judgeBaseRate(req *JudgeReq) (rate *RateResult) {
	rate = &RateResult{}
	judgeBaseRateWithRate(rate, req)
	return
}

func judgeBaseRateWithRate(rate *RateResult, req *JudgeReq) {
	// 基本番数，不计入癞子
	hands := req.hands
	events := req.Events
	lenOfHands := len(hands)
	//printMj(hands)
	// 1. 判断4张，和手牌1张，碰1张情况
	if lenOfHands > 4 {
		for i := 0; i < lenOfHands-4; {
			if hands[i] == hands[i+1] && hands[i] == hands[i+2] && hands[i] == hands[i+3] {
				rate.GangCount++
				i += 4
			} else {
				if events != nil {
					for _, e := range events {
						if e.IsPeng() && Mj(e.Key).ToByte() == hands[i] {
							rate.GangCount++
						}
					}
				}
				i++
			}
		}
	}
	// 2. 判断杠
	if events != nil {
		for _, e := range events {
			if e.IsGang() {
				rate.GangCount++
			}
		}
	}
	// 3. 清一色
	if req.colorCount == 0x01 {
		rate.Mask |= RATE_MASK_QING_YI_SE
	}
}

func judgeRateImpl(rate *RateResult, req *JudgeReq) {
	lenOfHands := len(req.handsWithLz)
	if lenOfHands == 14 && judge7Dui(req.handsWithLz) {
		log.Println("7dui")
		rate.Mask |= RATE_MASK_7DUI
	}
	// 金钩胡
	if lenOfHands == 2 {
		rate.Mask |= RATE_MASK_JIN_GOU
	}
	// 对对胡
	if judgeDuiDuiHu(req.handsWithLz) {
		log.Println("duiduiHu")
		rate.Mask |= RATE_MASK_DUIDUI_HU
	}
}

// 判断对对胡，23，233，2333 牌型
func judgeDuiDuiHu(hands []byte) bool {
	lenOfHands := len(hands)
	var dui bool = false
	for i := 0; i < lenOfHands-1; {
		if hands[i] == hands[i+1] {
			if i+2 < lenOfHands && hands[i] == hands[i+2] {
				i += 3
			} else if dui {
				return false
			} else {
				dui = true
				i += 2
			}
		} else {
			return false
		}
	}
	return true
}

// 七对
func judge7Dui(hands []byte) bool {
	for i := 0; i < 14; i += 2 {
		if hands[i] != hands[i+1] {
			return false
		}
	}
	return true
}
